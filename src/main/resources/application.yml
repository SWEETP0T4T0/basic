#spring.application.name=basic

#아래 방식은 .properties 확장자에 의한 방식
#.을통해 계층구조를 표현 => 문제점 : 중복이 발생할 가능성이 많음.
#server.port=8081

#아래 방식은 .yml 또는 .yaml 확장자에 의한 방식
#들여쓰기 방식을 통해서 계층구조를 표현
#server:
#   port: 8081

spring:
#  아래의 jdbc 기본 db관련 설정은 jdbc 뿐만 아니라 mybatis, jpa 등 모든 기술에 근간이 됨.
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/basic
    username: root
    password: 1234
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MariaDBDialect
#    ddl문 자동생성. 테이블은 자동반영(생성)해주나, 스키마는 반드시 사전에 생성필요.
    generate-ddl: true
#    jpa는 클래스고 hibernate가 실질적인 구현체다.
    hibernate:
#      create : 매번 테이블을 드랍 후 재 생성
#      update : entity 변경사항만 alter를 적용하고 기존 데이터 유지.(모든 변경사항을 alter 하는 것은 아님) - 컬럼의 추가 정도만 반영
#      validate : 실제 DB와의 차이만을 check하고 콘솔로만 출력
    ddl-auto: create
#      콘솔창에 ddl, dml문을 출력하여 보여주는 옵션
    show_sql: true
#    swagger 2.4 이상 버전을 사용하기 위해 url패턴 관련한 설정 변경
#  swagger의 url : http://localhost:8080/swagger-ui/
  mvc:
    pathmatch:
      matching-strategy: ant-path-matcher


# mapper 파일(mybatis의 쿼리파일)의 위치를 명시   기본적으로 resources 폴더의 하위를 스캔  **은 모든 파일을 명시
mybatis:
  mapper-locations: classpath:/mapper/**/*.xml
